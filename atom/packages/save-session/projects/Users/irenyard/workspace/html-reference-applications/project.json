[{"diskText":"/**\n * Usage:\n * define('module', ['dep1', 'dep2'], function(dep1, dep2) {});\n * require(['module'], function(module1) {});\n */\n\n(function() {\n    \"use strict\";\n\n    var loader = window.loader || {},\n        execQueue = [],\n        config,\n        modules,\n        frag;\n\n    modules = loader._modules = {\n        // 'moduleA': {\n        //      'deps': [\"moduleB\", \"moduleC\"],\n        //      'module': function() {}\n        // }\n    };\n\n    // Set default config.\n    config = loader.config || {\n        origin: document.location.origin,\n        path: '/'\n    };\n\n    loader.config = function(name, value) {\n        if (name !== undefined && value !== undefined) {\n            config[name] = value;\n        }\n\n        if (name !== undefined) {\n            return config[name];\n        }\n    };\n\n    /**\n     * @param id {string}\n     * @param [deps] {array|string}\n     * @param module {function}\n     */\n    loader.define = function(id) {\n        var deps,\n            module;\n\n        // Handle optional deps argument. (id, [deps,] module)\n        if (arguments[2] === undefined) {\n            module = arguments[1];\n        } else {\n            module = arguments[2];\n            deps = arguments[1];\n\n            // If deps is a single element, make it into an array.\n            if (!(deps instanceof Array)) {\n                deps = [deps];\n            }\n        }\n\n        // Add module to registry.\n        modules[id] = modules[id] || {};\n\n        modules[id].deps = deps;\n\n        if (typeof module === 'function') {\n            modules[id].module = loader._initModule(deps, module);\n        }\n        else {\n            modules[id].module = module;\n        }\n    };\n\n    loader._addToQueue = function(id) {\n        // Use a document fragment to avoid hitting the DOM more than necessary.\n        var elm;\n\n        frag = frag || document.createDocumentFragment();\n        elm = document.createElement('script');\n\n        elm.setAttribute('src', config.origin + config.path + id + '.js');\n        // Try and initialise the modules in the queue once the script has loaded.\n        elm.addEventListener('load', loader._initQueue);\n\n        frag.appendChild(elm);\n    };\n\n    loader._loadScripts = function() {\n        if (frag instanceof window.DocumentFragment) {\n            // Load the scripts in the queue.\n            document.body.appendChild(frag);\n            // Clear the queue.\n            frag = undefined;\n        }\n    };\n\n    loader._loadDeps = function(deps) {\n        var id;\n\n        for (var i = 0; i < deps.length; i++) {\n            id = deps[i];\n            if (modules[id] !== undefined) {\n                // Module already loaded.\n                continue;\n            }\n            // Set up structure in module registry.\n            modules[id] = {\n                'deps': [],\n                'module': undefined\n            };\n            // Check dependencies.\n            loader._addToQueue(id);\n        }\n        loader._loadScripts();\n    };\n\n    loader._initQueue = function () {\n        console.log(\"_initQueue\");\n        execQueue.forEach(function(item) {\n            loader._initModule(item.deps, item.module);\n        });\n    };\n\n    loader._initModule = function(deps, module) {\n        var depModules = [],\n            depsLoaded = true;\n\n        if (Array.isArray(deps) && deps.length > 0) {\n            // Check dependencies are loaded.\n            depsLoaded = deps.every(function(dep) {\n                if (modules[dep] === undefined || modules[dep].module === undefined) {\n                    // Dependency not loaded, try again when scripts load.\n                    return false;\n                }\n                depModules.push(modules[dep].module);\n                return true;\n            });\n        }\n\n        if (depsLoaded === false) {\n            // Add to queue to execute when dependencies have loaded.\n            if (!execQueue.some(function(item) {return item.module === module;})) {\n                execQueue.push({\n                    'deps': deps,\n                    'module': module\n                });\n            }\n            return;\n        }\n\n        return module.apply(this, depModules);\n    };\n\n    /**\n     * @param deps {array|string}\n     * @param [module] {function}\n     */\n    loader.require = function(deps, module) {\n        // If deps is a single element, make it into an array.\n        if (!(deps instanceof Array)) {\n            deps = [deps];\n        }\n\n        loader._loadDeps(deps);\n        loader._initModule(deps, module);\n    };\n\n    // Assign globals.\n    window.loader = loader;\n    window.define = loader.define;\n    window.require = loader.require;\n})();\n","text":"/**\n * Usage:\n * define('module', ['dep1', 'dep2'], function(dep1, dep2) {});\n * require(['module'], function(module1) {});\n */\n\n(function() {\n    \"use strict\";\n\n    var loader = window.loader || {},\n        execQueue = [],\n        config,\n        modules,\n        frag;\n\n    modules = loader._modules = {\n        // 'moduleA': {\n        //      'deps': [\"moduleB\", \"moduleC\"],\n        //      'module': function() {}\n        // }\n    };\n\n    // Set default config.\n    config = loader.config || {\n        origin: document.location.origin,\n        path: '/'\n    };\n\n    loader.config = function(name, value) {\n        if (name !== undefined && value !== undefined) {\n            config[name] = value;\n        }\n\n        if (name !== undefined) {\n            return config[name];\n        }\n    };\n\n    /**\n     * @param id {string}\n     * @param [deps] {array|string}\n     * @param module {function}\n     */\n    loader.define = function(id) {\n        var deps,\n            module;\n\n        // Handle optional deps argument. (id, [deps,] module)\n        if (arguments[2] === undefined) {\n            module = arguments[1];\n        } else {\n            module = arguments[2];\n            deps = arguments[1];\n\n            // If deps is a single element, make it into an array.\n            if (!(deps instanceof Array)) {\n                deps = [deps];\n            }\n        }\n\n        // Add module to registry.\n        modules[id] = modules[id] || {};\n\n        modules[id].deps = deps;\n\n        if (typeof module === 'function') {\n            modules[id].module = loader._initModule(deps, module);\n        }\n        else {\n            modules[id].module = module;\n        }\n    };\n\n    loader._addToQueue = function(id) {\n        // Use a document fragment to avoid hitting the DOM more than necessary.\n        var elm;\n\n        frag = frag || document.createDocumentFragment();\n        elm = document.createElement('script');\n\n        elm.setAttribute('src', config.origin + config.path + id + '.js');\n        // Try and initialise the modules in the queue once the script has loaded.\n        elm.addEventListener('load', loader._initQueue);\n\n        frag.appendChild(elm);\n    };\n\n    loader._loadScripts = function() {\n        if (frag instanceof window.DocumentFragment) {\n            // Load the scripts in the queue.\n            document.body.appendChild(frag);\n            // Clear the queue.\n            frag = undefined;\n        }\n    };\n\n    loader._loadDeps = function(deps) {\n        var id;\n\n        for (var i = 0; i < deps.length; i++) {\n            id = deps[i];\n            if (modules[id] !== undefined) {\n                // Module already loaded.\n                continue;\n            }\n            // Set up structure in module registry.\n            modules[id] = {\n                'deps': [],\n                'module': undefined\n            };\n            // Check dependencies.\n            loader._addToQueue(id);\n        }\n        loader._loadScripts();\n    };\n\n    loader._initQueue = function () {\n        console.log(execQueue);\n        execQueue.forEach(function(item) {\n            loader._initModule(item.deps, item.module);\n        });\n    };\n\n    loader._initModule = function(deps, module) {\n        var depModules = [],\n            depsLoaded = true;\n\n        if (Array.isArray(deps) && deps.length > 0) {\n            // Check dependencies are loaded.\n            depsLoaded = deps.every(function(dep) {\n                if (modules[dep] === undefined || modules[dep].module === undefined) {\n                    // Dependency not loaded, try again when scripts load.\n                    return false;\n                }\n                depModules.push(modules[dep].module);\n                return true;\n            });\n        }\n\n        if (depsLoaded === false) {\n            // Add to queue to execute when dependencies have loaded.\n            if (!execQueue.some(function(item) {return item.module === module;})) {\n                execQueue.push({\n                    'deps': deps,\n                    'module': module\n                });\n            }\n            return;\n        }\n\n        return module.apply(this, depModules);\n    };\n\n    /**\n     * @param deps {array|string}\n     * @param [module] {function}\n     */\n    loader.require = function(deps, module) {\n        // If deps is a single element, make it into an array.\n        if (!(deps instanceof Array)) {\n            deps = [deps];\n        }\n\n        loader._loadDeps(deps);\n        loader._initModule(deps, module);\n    };\n\n    // Assign globals.\n    window.loader = loader;\n    window.define = loader.define;\n    window.require = loader.require;\n})();\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/js/loader.js","scroll":98.13333333333334,"cursor":{"row":117,"column":29}},{"diskText":"<!DOCTYPE html>\n<html>\n<head>\n    <title>IPCRB Reference Application</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <!-- build:css css/app.min.css -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/app.css\" />\n    <!-- endbuild -->\n\n</head>\n<body class=\"viewport\">\n\n    <!-- video objects -->\n    <video id=\"html5Video\"></video>\n\n    <div id=\"vbVideoContainer\">\n        <object id=\"vbVideo\" type=\"video/broadcast\"></object>\n    </div>\n\n    <!-- Application views -->\n    <div id=\"view\"></div>\n\n    <!-- build:js1 js/app.min.js -->\n    <script>\n        (function() {\n            \"use strict\";\n            // Set loader options.\n            window.loader = {\n                'config': {\n                    'origin': window.location.origin,\n                    'path': '/js/'\n                }\n            };\n        })();\n    </script>\n    <script src=\"js/loader.js\"></script>\n\n    <!--\n    <script src=\"js/configs/keys.js\"></script>\n\n    <script src=\"js/stubs/videoBroadcastStub.js\"></script>\n    <script src=\"js/stubs/promiseStub.js\"></script>\n    <script src=\"js/stubs/applicationStateStub.js\"></script>\n    <script src=\"js/stubs/defaultChannelData.js\"></script>\n\n    <script src=\"js/framework/view.js\"></script>\n\n    <script src=\"js/controllers/videoController.js\"></script>\n    <script src=\"js/controllers/scrollController.js\"></script>\n\n    <script src=\"js/models/channelModel.js\"></script>\n    <script src=\"js/controllers/channelController.js\"></script>\n\n    <script src=\"js/mode/fullMode.js\"></script>\n    <script src=\"js/mode/redButtonMode.js\"></script>\n\n    <script src=\"js/models/applicationViewModel.js\"></script>\n    <script src=\"js/controllers/viewController.js\"></script>\n\n    <script src=\"js/view/channelMenu.js\"></script>\n    <script src=\"js/view/redButton.js\"></script>\n\n    <script src=\"js/template.js\"></script>\n    -->\n\n    <script>\n        (function() {\n            \"use strict\";\n            require('controllers/viewController', function(viewController) {\n                viewController.init();\n            });\n        })();\n    </script>\n\n    <script>\n        // crb.viewController.init();\n    </script>\n    <!-- endbuild -->\n</body>\n</html>\n","text":"<!DOCTYPE html>\n<html>\n<head>\n    <title>IPCRB Reference Application</title>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <!-- build:css css/app.min.css -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/app.css\" />\n    <!-- endbuild -->\n\n</head>\n<body class=\"viewport\">\n\n    <!-- video objects -->\n    <video id=\"html5Video\"></video>\n\n    <div id=\"vbVideoContainer\">\n        <object id=\"vbVideo\" type=\"video/broadcast\"></object>\n    </div>\n\n    <!-- Application views -->\n    <div id=\"view\"></div>\n\n    <!-- build:js1 js/app.min.js -->\n    <script>\n        (function() {\n            \"use strict\";\n            // Set loader options.\n            window.loader = {\n                'config': {\n                    'origin': window.location.origin,\n                    'path': '/js/'\n                }\n            };\n        })();\n    </script>\n    <script src=\"js/loader.js\"></script>\n\n    <!--\n    <script src=\"js/configs/keys.js\"></script>\n\n    <script src=\"js/stubs/videoBroadcastStub.js\"></script>\n    <script src=\"js/stubs/promiseStub.js\"></script>\n    <script src=\"js/stubs/applicationStateStub.js\"></script>\n    <script src=\"js/stubs/defaultChannelData.js\"></script>\n\n    <script src=\"js/framework/view.js\"></script>\n\n    <script src=\"js/controllers/videoController.js\"></script>\n    <script src=\"js/controllers/scrollController.js\"></script>\n\n    <script src=\"js/models/channelModel.js\"></script>\n    <script src=\"js/controllers/channelController.js\"></script>\n\n    <script src=\"js/mode/fullMode.js\"></script>\n    <script src=\"js/mode/redButtonMode.js\"></script>\n\n    <script src=\"js/models/applicationViewModel.js\"></script>\n    <script src=\"js/controllers/viewController.js\"></script>\n\n    <script src=\"js/view/channelMenu.js\"></script>\n    <script src=\"js/view/redButton.js\"></script>\n\n    <script src=\"js/template.js\"></script>\n    -->\n\n    <script>\n        (function() {\n            \"use strict\";\n            require('controllers/viewController', function(viewController) {\n                viewController.init();\n            });\n        })();\n    </script>\n\n    <script>\n        // crb.viewController.init();\n    </script>\n    <!-- endbuild -->\n</body>\n</html>\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/index.html","scroll":31.93333333333333,"cursor":{"row":65,"column":7}},{"diskText":"define('template', function() {\n    \"use strict\";\n\n    /**\n     * @constructs\n     * @param {Object} opts - Options object.\n     * @param {string} [opts.template] - String representing the template. Either a template or url must be specified.\n     * @param {string} [opts.url] - URL of template file. Either a template or url must be specified.\n     * @param {Element|string} opts.parent - DOM Element or selector to which the compiled template should be appended.\n     */\n    function Template(opts) {\n        if (!(this instanceof Template)) {\n            throw new Error('Constructor called as a function.');\n        }\n\n        // Set up options.\n        opts = opts || {};\n\n        if (typeof opts.template !== 'string' && typeof opts.url !== 'string') {\n            throw new Error('No template specified.');\n        }\n\n        if (opts.parent instanceof Element) {\n            this._parent = opts.parent;\n        }\n        else if (typeof opts.parent === 'string') {\n            this._parent = document.querySelector(opts.parent);\n        }\n\n        if (!(this._parent instanceof Element)) {\n            throw new Error('No parent element specified.');\n        }\n\n        this._data = opts.data;\n        this._compiled = undefined;\n\n        if (typeof opts.template === 'string') {\n            this._template = opts.template;\n        }\n        else {\n            // Fetch URL over XHR.\n            this._fetchTemplate(opts.url);\n        }\n\n    }\n\n    /**\n     * @description Fetches the template from the supplied URL.\n     */\n    Template.prototype._fetchTemplate = function(url) {\n        var self = this;\n\n        this._req = new XMLHttpRequest();\n\n        this._req.addEventListener('load', function() {\n            self._template = this.responseText;\n        });\n        this._req.addEventListener('error', function() {\n            throw new Error('Could not load template.');\n        });\n        // Fires for abort, load and error events.\n        this._req.addEventListener('loadend', function() {\n            // Clean up the request object, once we've finished with it.\n            delete self._req;\n        });\n        this._req.open('GET', url, true);\n        this._req.send();\n    };\n\n    /**\n     * @description Create a document fragment from template string.\n     */\n    function createFragmentFromHTML(template) {\n        var tempElm = document.createElement('div'),\n            frag = document.createDocumentFragment(),\n            length;\n\n        // Populate temp element with template.\n        tempElm.innerHTML = template;\n\n        // Loop over child nodes, appending to document fragment.\n        length = tempElm.childNodes.length;\n        while (tempElm.firstChild) {\n            // console.log(tempElm.childNodes[i]);\n            frag.appendChild(tempElm.firstChild);\n        }\n\n        return frag;\n    }\n\n    /**\n     * @description Populate a single element with data.\n     */\n    function populateSingle(elm, data) {\n        var keys = Object.keys(data),\n            tempElm = document.createElement('div'),\n            html = elm.outerHTML,\n            textNode;\n\n        keys.forEach(function(key) {\n            var re = new RegExp('\\\\{\\\\{' + key + '\\\\}\\\\}', 'g'),\n                textNode;\n\n            html = html.replace(re, data[key]);\n        });\n\n        tempElm.appendChild(elm);\n        tempElm.innerHTML = html;\n        elm = tempElm.childNodes[0];\n\n        return elm;\n    }\n\n    /**\n     * @description Create multiple elements from an array of data.\n     */\n    function populateElements(elm, data) {\n        var list = document.createDocumentFragment(),\n            // Deep clone the element.\n            clone = elm.cloneNode(true);\n\n        // Don't create multiple elements with the same ID.\n        if (data.length > 1) {\n            clone.removeAttribute('id');\n        }\n\n        // Loop over data, creating a new cloned element for each item.\n        data.forEach(function(item) {\n            var elm = clone.cloneNode(true);\n\n            elm = populateSingle(elm, item);\n            list.appendChild(elm);\n        });\n\n        // Replace original with fragment.\n        elm.parentNode.replaceChild(list, elm);\n    }\n\n    function populateElement(elm, data) {\n        // If the data not an array, create one.\n        if (Object.prototype.toString.call(data) !== '[object Array]') {\n            data = [data];\n        }\n        populateElements(elm, data);\n    }\n\n    /**\n     * @description Populates the template with data.\n     * @param [data] Data object with which to populate the template.\n     * @param [callback] Callback to run after successfully rendering the template.\n     */\n    Template.prototype.render = function() {\n        var self = this,\n            args = arguments,\n            data,\n            callback,\n            keys,\n            frag;\n\n        for (var i = 0; i < args.length; i++) {\n            if (typeof args[i] === 'function') {\n                callback = args[i];\n            }\n            else if (typeof args[i] === 'object') {\n                data = args[i];\n            }\n        }\n\n        if (self._req !== undefined && self._req.readyState < 4) {\n            // Template has not been loaded, try again when it's loaded.\n            self._req.addEventListener('load', function() {\n                self.render.apply(self, args);\n            });\n            return;\n        }\n\n        // Set data by priority: passed into render(), stored on instance or empty.\n        data = data || self._data || {};\n\n        if (self._template === undefined) {\n            return;\n        } else {\n            self._data = data;\n        }\n\n        keys = Object.keys(data);\n        frag = createFragmentFromHTML(self._template);\n\n        keys.forEach(function(id) {\n            // DocumentFragment has no getElementById on YouView boxes.\n            var elm = frag.querySelector('#' + id);\n\n            if (elm !== null) {\n                populateElement(elm, data[id]);\n            }\n        });\n\n        self._compiled = frag;\n\n        delete self._data;\n\n        self.append();\n\n        if (typeof callback === 'function') {\n            callback.call(self);\n        }\n    };\n\n    /**\n     * @description Removes the template from the DOM.\n     */\n    Template.prototype.remove = function() {\n        var parent = this._parent;\n\n        if (parent === undefined) {\n            return;\n        }\n\n        // Remove all child nodes (if any) from the parent.\n        while (parent.lastChild) {\n            parent.removeChild(parent.lastChild);\n        }\n    };\n\n    /**\n     * @description Appends the rendered template to it's parent in the DOM.\n     */\n    Template.prototype.append = function() {\n        var parent = this._parent;\n\n        if (parent === undefined) {\n            return;\n        }\n\n        // Remove template from DOM.\n        this.remove();\n\n        parent.appendChild(this._compiled);\n\n        delete this._compiled;\n    };\n\n    return Template;\n});\n","text":"define('template', function() {\n    \"use strict\";\n\n    /**\n     * @constructs\n     * @param {Object} opts - Options object.\n     * @param {string} [opts.template] - String representing the template. Either a template or url must be specified.\n     * @param {string} [opts.url] - URL of template file. Either a template or url must be specified.\n     * @param {Element|string} opts.parent - DOM Element or selector to which the compiled template should be appended.\n     */\n    function Template(opts) {\n        if (!(this instanceof Template)) {\n            throw new Error('Constructor called as a function.');\n        }\n\n        // Set up options.\n        opts = opts || {};\n\n        if (typeof opts.template !== 'string' && typeof opts.url !== 'string') {\n            throw new Error('No template specified.');\n        }\n\n        if (opts.parent instanceof Element) {\n            this._parent = opts.parent;\n        }\n        else if (typeof opts.parent === 'string') {\n            this._parent = document.querySelector(opts.parent);\n        }\n\n        if (!(this._parent instanceof Element)) {\n            throw new Error('No parent element specified.');\n        }\n\n        this._data = opts.data;\n        this._compiled = undefined;\n\n        if (typeof opts.template === 'string') {\n            this._template = opts.template;\n        }\n        else {\n            // Fetch URL over XHR.\n            this._fetchTemplate(opts.url);\n        }\n\n    }\n\n    /**\n     * @description Fetches the template from the supplied URL.\n     */\n    Template.prototype._fetchTemplate = function(url) {\n        var self = this;\n\n        this._req = new XMLHttpRequest();\n\n        this._req.addEventListener('load', function() {\n            self._template = this.responseText;\n        });\n        this._req.addEventListener('error', function() {\n            throw new Error('Could not load template.');\n        });\n        // Fires for abort, load and error events.\n        this._req.addEventListener('loadend', function() {\n            // Clean up the request object, once we've finished with it.\n            delete self._req;\n        });\n        this._req.open('GET', url, true);\n        this._req.send();\n    };\n\n    /**\n     * @description Create a document fragment from template string.\n     */\n    function createFragmentFromHTML(template) {\n        var tempElm = document.createElement('div'),\n            frag = document.createDocumentFragment(),\n            length;\n\n        // Populate temp element with template.\n        tempElm.innerHTML = template;\n\n        // Loop over child nodes, appending to document fragment.\n        length = tempElm.childNodes.length;\n        while (tempElm.firstChild) {\n            // console.log(tempElm.childNodes[i]);\n            frag.appendChild(tempElm.firstChild);\n        }\n\n        return frag;\n    }\n\n    /**\n     * @description Populate a single element with data.\n     */\n    function populateSingle(elm, data) {\n        var keys = Object.keys(data),\n            tempElm = document.createElement('div'),\n            html = elm.outerHTML,\n            textNode;\n\n        keys.forEach(function(key) {\n            var re = new RegExp('\\\\{\\\\{' + key + '\\\\}\\\\}', 'g'),\n                textNode;\n\n            html = html.replace(re, data[key]);\n        });\n\n        tempElm.appendChild(elm);\n        tempElm.innerHTML = html;\n        elm = tempElm.childNodes[0];\n\n        return elm;\n    }\n\n    /**\n     * @description Create multiple elements from an array of data.\n     */\n    function populateElements(elm, data) {\n        var list = document.createDocumentFragment(),\n            // Deep clone the element.\n            clone = elm.cloneNode(true);\n\n        // Don't create multiple elements with the same ID.\n        if (data.length > 1) {\n            clone.removeAttribute('id');\n        }\n\n        // Loop over data, creating a new cloned element for each item.\n        data.forEach(function(item) {\n            var elm = clone.cloneNode(true);\n\n            elm = populateSingle(elm, item);\n            list.appendChild(elm);\n        });\n\n        // Replace original with fragment.\n        elm.parentNode.replaceChild(list, elm);\n    }\n\n    function populateElement(elm, data) {\n        // If the data not an array, create one.\n        if (Object.prototype.toString.call(data) !== '[object Array]') {\n            data = [data];\n        }\n        populateElements(elm, data);\n    }\n\n    /**\n     * @description Populates the template with data.\n     * @param [data] Data object with which to populate the template.\n     * @param [callback] Callback to run after successfully rendering the template.\n     */\n    Template.prototype.render = function() {\n        var self = this,\n            args = arguments,\n            data,\n            callback,\n            keys,\n            frag;\n\n        for (var i = 0; i < args.length; i++) {\n            if (typeof args[i] === 'function') {\n                callback = args[i];\n            }\n            else if (typeof args[i] === 'object') {\n                data = args[i];\n            }\n        }\n\n        if (self._req !== undefined && self._req.readyState < 4) {\n            // Template has not been loaded, try again when it's loaded.\n            self._req.addEventListener('load', function() {\n                self.render.apply(self, args);\n            });\n            return;\n        }\n\n        // Set data by priority: passed into render(), stored on instance or empty.\n        data = data || self._data || {};\n\n        if (self._template === undefined) {\n            return;\n        } else {\n            self._data = data;\n        }\n\n        keys = Object.keys(data);\n        frag = createFragmentFromHTML(self._template);\n\n        keys.forEach(function(id) {\n            // DocumentFragment has no getElementById on YouView boxes.\n            var elm = frag.querySelector('#' + id);\n\n            if (elm !== null) {\n                populateElement(elm, data[id]);\n            }\n        });\n\n        self._compiled = frag;\n\n        delete self._data;\n\n        self.append();\n\n        if (typeof callback === 'function') {\n            callback.call(self);\n        }\n    };\n\n    /**\n     * @description Removes the template from the DOM.\n     */\n    Template.prototype.remove = function() {\n        var parent = this._parent;\n\n        if (parent === undefined) {\n            return;\n        }\n\n        // Remove all child nodes (if any) from the parent.\n        while (parent.lastChild) {\n            parent.removeChild(parent.lastChild);\n        }\n    };\n\n    /**\n     * @description Appends the rendered template to it's parent in the DOM.\n     */\n    Template.prototype.append = function() {\n        var parent = this._parent;\n\n        if (parent === undefined) {\n            return;\n        }\n\n        // Remove template from DOM.\n        this.remove();\n\n        parent.appendChild(this._compiled);\n\n        delete this._compiled;\n    };\n\n    return Template;\n});\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/js/template.js","scroll":2.0666666666666664,"cursor":{"row":0,"column":16}},{"diskText":"/*\n * Copyright 2014 YouView TV Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class channelMenu\n * @description The full IPCRB mode when a user presses the red button.\n * Provides a visible menu to the DOM and a key handler.\n *\n */\n\ndefine('view/channelMenu',\n    [\n        'config/keys',\n        'framework/view',\n        'controllers/viewController',\n        'controllers/videoController',\n        'controllers/channelController',\n        'models/channelModel',\n        'view/fullMode'\n    ],\n    function(keyEvent, View, viewController, VideoController, ChannelController, ChannelModel, FullMode) {\n        \"use strict\";\n        return function() {\n            var fullModeTemplate = document.getElementById('fullMode'),\n                videoController = new VideoController(),\n                channelMenu = new View(),\n                channelModel = new ChannelModel(),\n                channelController = new ChannelController(channelModel);\n\n            channelMenu.mode = new FullMode();\n            /**\n             * @private\n             * @function renderChannelListToDom\n             * @description Inserts the channel list items into the\n             * full mode DOM template\n             */\n            function renderChannelListToDom() {\n                var availableChannels = channelModel.getFilteredChannelList(),\n                    template = new window.Template({\n                        'url': '/templates/channellist.tpl',\n                        'parent': '#ChannelListContainer'\n                    }),\n                    data = {\n                        'channel': []\n                    };\n\n                availableChannels.forEach(function(item) {\n                    // Add channels to template data.\n                    data.channel.push({\n                        'id': item.id,\n                        'name': item.title\n                    });\n                });\n\n                template.render(data);\n            }\n\n            /**\n             * @private\n             * @function getChannelList\n             * @description Setup the channel object\n             */\n            function getChannelList() {\n                return channelModel.requestChannelList();\n                //renderChannelListToDom();\n            }\n\n\n            channelMenu.hide = function() {\n                channelController.hideChannels();\n                //            fullModeTemplate.classList.add('hide');\n            };\n\n\n\n            channelMenu.show = function() {\n                var template = new window.Template({\n                        'url': '/templates/fullmode.tpl',\n                        'parent': '#view'\n                    }),\n                    data = {\n                        'channel': []\n                    },\n                    channelList = getChannelList() || [];\n\n                // Build data object from channel list.\n                channelList.forEach(function(item) {\n                    // Add channels to template data.\n                    data.channel.push({\n                        'id': item.id,\n                        'name': item.title\n                    });\n                });\n\n                template.render(data, function() {\n                    channelController.showChannels();\n                    videoController.setSmallScreen();\n                });\n            };\n            /**\n             * @function keyHandler\n             * @description key handler delegated to by the StateController.\n             */\n            channelMenu.keyHandler = function(keyboardEvent) {\n                console.log(\"channelMenu.keyHandler: \");\n\n                var keyCode = keyboardEvent.keyCode,\n                    numberKey = keyCode - 48;\n\n                switch (keyCode) {\n                    case keyEvent.VK_RED:\n                    case keyEvent.VK_R:\n                    case keyEvent.VK_BACK:\n                        viewController.nextView();\n                        break;\n                    case keyEvent.VK_1:\n                    case keyEvent.VK_2:\n                    case keyEvent.VK_3:\n                    case keyEvent.VK_4:\n                    case keyEvent.VK_5:\n                    case keyEvent.VK_6:\n                    case keyEvent.VK_7:\n                    case keyEvent.VK_8:\n                    case keyEvent.VK_9:\n                        channelController.changeChannelByNumberKey(numberKey);\n                        break;\n                    case keyEvent.VK_UP:\n                        channelController.moveUp();\n                        break;\n                    case keyEvent.VK_DOWN:\n                        channelController.moveDown();\n                        break;\n                    case keyEvent.VK_OK:\n                        channelController.changeChannel();\n                        break;\n                }\n            };\n        };\n    }\n);\n","text":"/*\n * Copyright 2014 YouView TV Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class channelMenu\n * @description The full IPCRB mode when a user presses the red button.\n * Provides a visible menu to the DOM and a key handler.\n *\n */\n\ndefine('view/channelMenu',\n    [\n        'config/keys',\n        'framework/view',\n        'controllers/viewController',\n        'controllers/videoController',\n        'controllers/channelController',\n        'models/channelModel',\n        'view/fullMode'\n    ],\n    function(keyEvent, View, viewController, VideoController, ChannelController, ChannelModel, FullMode) {\n        \"use strict\";\n        return function() {\n            var fullModeTemplate = document.getElementById('fullMode'),\n                videoController = new VideoController(),\n                channelMenu = new View(),\n                channelModel = new ChannelModel(),\n                channelController = new ChannelController(channelModel);\n\n            channelMenu.mode = new FullMode();\n            /**\n             * @private\n             * @function renderChannelListToDom\n             * @description Inserts the channel list items into the\n             * full mode DOM template\n             */\n            function renderChannelListToDom() {\n                var availableChannels = channelModel.getFilteredChannelList(),\n                    template = new window.Template({\n                        'url': '/templates/channellist.tpl',\n                        'parent': '#ChannelListContainer'\n                    }),\n                    data = {\n                        'channel': []\n                    };\n\n                availableChannels.forEach(function(item) {\n                    // Add channels to template data.\n                    data.channel.push({\n                        'id': item.id,\n                        'name': item.title\n                    });\n                });\n\n                template.render(data);\n            }\n\n            /**\n             * @private\n             * @function getChannelList\n             * @description Setup the channel object\n             */\n            function getChannelList() {\n                return channelModel.requestChannelList();\n                //renderChannelListToDom();\n            }\n\n\n            channelMenu.hide = function() {\n                channelController.hideChannels();\n                //            fullModeTemplate.classList.add('hide');\n            };\n\n\n\n            channelMenu.show = function() {\n                var template = new window.Template({\n                        'url': '/templates/fullmode.tpl',\n                        'parent': '#view'\n                    }),\n                    data = {\n                        'channel': []\n                    },\n                    channelList = getChannelList() || [];\n\n                // Build data object from channel list.\n                channelList.forEach(function(item) {\n                    // Add channels to template data.\n                    data.channel.push({\n                        'id': item.id,\n                        'name': item.title\n                    });\n                });\n\n                template.render(data, function() {\n                    channelController.showChannels();\n                    videoController.setSmallScreen();\n                });\n            };\n            /**\n             * @function keyHandler\n             * @description key handler delegated to by the StateController.\n             */\n            channelMenu.keyHandler = function(keyboardEvent) {\n                console.log(\"channelMenu.keyHandler: \");\n\n                var keyCode = keyboardEvent.keyCode,\n                    numberKey = keyCode - 48;\n\n                switch (keyCode) {\n                    case keyEvent.VK_RED:\n                    case keyEvent.VK_R:\n                    case keyEvent.VK_BACK:\n                        viewController.nextView();\n                        break;\n                    case keyEvent.VK_1:\n                    case keyEvent.VK_2:\n                    case keyEvent.VK_3:\n                    case keyEvent.VK_4:\n                    case keyEvent.VK_5:\n                    case keyEvent.VK_6:\n                    case keyEvent.VK_7:\n                    case keyEvent.VK_8:\n                    case keyEvent.VK_9:\n                        channelController.changeChannelByNumberKey(numberKey);\n                        break;\n                    case keyEvent.VK_UP:\n                        channelController.moveUp();\n                        break;\n                    case keyEvent.VK_DOWN:\n                        channelController.moveDown();\n                        break;\n                    case keyEvent.VK_OK:\n                        channelController.changeChannel();\n                        break;\n                }\n            };\n        };\n    }\n);\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/js/view/channelMenu.js","scroll":25.066666666666666,"cursor":{"row":23,"column":0}},{"diskText":"/**\n * Copyright 2014 YouView TV Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class channelModel\n * @description Maintains the application channel list\n *\n */\n\ndefine('models/channelModel', ['stubs/defaultChannelData'], function(defaultChannelData) {\n    \"use strict\";\n    return function() {\n        var self = this,\n            _availableChannels = [],\n            ID_IPTV_URI = 41,\n            vbVideo = document.getElementById('vbVideo');\n\n        /**\n         * @function setFilteredChannelList\n         * @description creates a JSON object from the channel\n         * list data provided.\n         * @param channelList filtered list of available IP channels\n         */\n        function setFilteredChannelList(channelList) {\n            var i;\n\n            // If the channel list has not been returned\n            // default to stub data\n            if (channelList === undefined) {\n                _availableChannels = defaultChannelData;\n                return;\n            }\n\n            for (i = 0; i < channelList.length; i++) {\n                /**\n                 * the below check should not be required as the channel list should\n                 * only include a list of appropriate publisher's channels, this is\n                 * list data provided.\n                 * likely to be IP channels only\n                 */\n                if (channelList.item(i).idType === ID_IPTV_URI) {\n                    _availableChannels.push({\n                        id: channelList.item(i).ccid,\n                        title: channelList.item(i).name\n                    });\n                }\n            }\n\n        }\n\n        /**\n         * @function requestChannelList\n         * @description {channelConfig.channelList|Number} Gets full channel list from the vbVideo Object\n         * and stores the results in\n         * @returns channelList\n         */\n        self.requestChannelList = function() {\n            var channelConfig,\n                channelList;\n\n            try {\n                /**\n                 * The call to getChannelConfig through the video broadcast object below gets the channel\n                 * config which can then supply the channel list. This is surrounded by a try catch.\n                 * createFilteredList defined in OIPF document as:\n                 * ChannelList createFilteredList( Boolean blocked, Boolean favourite, Boolean hidden, String favouriteListID )\n                 * The blocked argument indicates whether blocked (unprovisioned) channels shall be added to the list.\n                 *\n                 * @param setting blocked = true provides only unprovisioned.\n                 * @param setting blocked = false provides only provisioned.\n                 * @param setting blocked to undefined provides all channels whether provisioned or not.\n                 * @param The hidden argument indicates whether hidden channels shall be added to the list.\n                 *\n                 * The favourite argument should be set to undefined by application authors and the\n                 * favouriteListID should be set to '', but in any case the YouView Device will ignore these two arguments.\n                 */\n                channelConfig = vbVideo.getChannelConfig();\n\n                //(BuH)' or B'nH'\n                channelList = channelConfig.createFilteredList(undefined, undefined, false, '');\n            } catch (err) {\n                console.info(\"Error retrieving channel list, use default :: \", err);\n            } finally {\n                setFilteredChannelList(channelList);\n                return channelList;\n            }\n        };\n\n        /**\n         * @function getFilteredChannelList\n         * @return {object} channelList JSON object\n         */\n        self.getFilteredChannelList = function() {\n            return _availableChannels;\n        };\n    };\n});\n","text":"/**\n * Copyright 2014 YouView TV Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class channelModel\n * @description Maintains the application channel list\n *\n */\n\ndefine('models/channelModel', ['stubs/defaultChannelData'], function(defaultChannelData) {\n    \"use strict\";\n    return function() {\n        var self = this,\n            _availableChannels = [],\n            ID_IPTV_URI = 41,\n            vbVideo = document.getElementById('vbVideo');\n\n        /**\n         * @function setFilteredChannelList\n         * @description creates a JSON object from the channel\n         * list data provided.\n         * @param channelList filtered list of available IP channels\n         */\n        function setFilteredChannelList(channelList) {\n            var i;\n\n            // If the channel list has not been returned\n            // default to stub data\n            if (channelList === undefined) {\n                _availableChannels = defaultChannelData;\n                return;\n            }\n\n            for (i = 0; i < channelList.length; i++) {\n                /**\n                 * the below check should not be required as the channel list should\n                 * only include a list of appropriate publisher's channels, this is\n                 * list data provided.\n                 * likely to be IP channels only\n                 */\n                if (channelList.item(i).idType === ID_IPTV_URI) {\n                    _availableChannels.push({\n                        id: channelList.item(i).ccid,\n                        title: channelList.item(i).name\n                    });\n                }\n            }\n\n        }\n\n        /**\n         * @function requestChannelList\n         * @description {channelConfig.channelList|Number} Gets full channel list from the vbVideo Object\n         * and stores the results in\n         * @returns channelList\n         */\n        self.requestChannelList = function() {\n            var channelConfig,\n                channelList;\n\n            try {\n                /**\n                 * The call to getChannelConfig through the video broadcast object below gets the channel\n                 * config which can then supply the channel list. This is surrounded by a try catch.\n                 * createFilteredList defined in OIPF document as:\n                 * ChannelList createFilteredList( Boolean blocked, Boolean favourite, Boolean hidden, String favouriteListID )\n                 * The blocked argument indicates whether blocked (unprovisioned) channels shall be added to the list.\n                 *\n                 * @param setting blocked = true provides only unprovisioned.\n                 * @param setting blocked = false provides only provisioned.\n                 * @param setting blocked to undefined provides all channels whether provisioned or not.\n                 * @param The hidden argument indicates whether hidden channels shall be added to the list.\n                 *\n                 * The favourite argument should be set to undefined by application authors and the\n                 * favouriteListID should be set to '', but in any case the YouView Device will ignore these two arguments.\n                 */\n                channelConfig = vbVideo.getChannelConfig();\n\n                //(BuH)' or B'nH'\n                channelList = channelConfig.createFilteredList(undefined, undefined, false, '');\n            } catch (err) {\n                console.info(\"Error retrieving channel list, use default :: \", err);\n            } finally {\n                setFilteredChannelList(channelList);\n                return channelList;\n            }\n        };\n\n        /**\n         * @function getFilteredChannelList\n         * @return {object} channelList JSON object\n         */\n        self.getFilteredChannelList = function() {\n            return _availableChannels;\n        };\n    };\n});\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/js/models/channelModel.js","scroll":2.0666666666666664,"cursor":{"row":69,"column":46}},{"diskText":"/**\n * @preserve Copyright 2014 YouView TV Ltd\n *\n * @license Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class channelController\n *\n * Controls the channel list scrolling. Delegated from\n * the full mode state.\n *\n */\n\ndefine('controllers/channelController', ['controllers/scrollController'], function(ScrollController) {\n    \"use strict\";\n    return function(channelModel) {\n        var self = this,\n            scrollController = new ScrollController(),\n            vbVideo = document.getElementById('vbVideo'),\n            /**\n             * @private\n             * @type {object} channel list DOM node\n             */\n            _channelList = document.getElementById('channelList'),\n            /**\n             * @private\n             * @type {integer} Index position of the channel list\n             */\n            _focusedChannelIndex = 0;\n\n        /**\n         * @private\n         * @function _getCurrentlySelectedItem\n         * @returns The current DOM node from the channel\n         * list with the .selected class attached\n         */\n        function _getCurrentlySelectedItem() {\n            return _channelList.querySelector('.selected');\n        };\n\n        /**\n         * @function hideChannels\n         * @description\n         */\n        self.hideChannels = function() {\n            scrollController.scrollFullModeOut();\n        };\n\n        /**\n         * @function showChannels\n         * @description\n         */\n        self.showChannels = function() {\n            scrollController.scrollFullModeIn();\n        };\n\n        /**\n         * @function setDefaultChannelSelection\n         * @description Sets the default channel to highlight\n         */\n        self.setDefaultChannelSelection = function() {\n            if (_channelList.children.length >= 1) {\n                _channelList.children[_focusedChannelIndex].classList.add('selected');\n            }\n        };\n\n        /**\n         * @function moveUp\n         * @description Mov the highlight class to the previous channel item\n         */\n        self.moveUp = function() {\n            var channelsLength = channelModel.getFilteredChannelList().length - 1,\n                currentSelection = _getCurrentlySelectedItem();\n\n            if (_focusedChannelIndex > 0) {\n                currentSelection.classList.remove('selected');\n                currentSelection.previousSibling.classList.add('selected');\n\n                _focusedChannelIndex -= 1;\n\n                scrollController.scrollUp(_getCurrentlySelectedItem());\n            }\n        };\n\n        /**\n         * @function moveDown\n         * @description Move the highlight class to the next channel item\n         */\n        self.moveDown = function() {\n\n            var channelsLength = channelModel.getFilteredChannelList().length - 1,\n                currentSelection = _getCurrentlySelectedItem();\n\n            if (_focusedChannelIndex < channelsLength) {\n                currentSelection.classList.remove('selected');\n                currentSelection.nextSibling.classList.add('selected');\n\n                _focusedChannelIndex += 1;\n\n                scrollController.scrollDown(_getCurrentlySelectedItem());\n            }\n        };\n\n        /**\n         * @function changeChannel\n         * @description Triggers a channel change vbVideo API.\n         * Uses the selected index `data-channel` attribute to select\n         * the channel ID. The user should then be able to\n         */\n        self.changeChannel = function() {\n\n            var channelData = channelModel.requestChannelList(),\n                channelList = channelModel.getFilteredChannelList(),\n                channelId = channelList[_focusedChannelIndex].id;\n\n            vbVideo.onChannelChangeSucceeded = self.onChannelChangeSucceeded;\n            vbVideo.onChannelChangeError = self.onChannelChangeError;\n\n            if (channelId) {\n                vbVideo.bindToCurrentChannel();\n                vbVideo.setChannel(channelData.getChannel(channelId));\n            } else {\n                console.debug(\"Channel not found in ChannelList \");\n            }\n        };\n\n        /**\n         * @function changeChannelByNumberKey\n         * @description changes channel to numberKey positioned item on menu\n         * @param {type} numberKey\n         */\n        self.changeChannelByNumberKey = function(numberKey) {\n\n            var channelData = channelModel.requestChannelList(),\n                channelList = channelModel.getFilteredChannelList(),\n                selectedChannelNumber = channelList[numberKey - 1].id;\n\n            if (selectedChannelNumber && numberKey <= channelList.length) {\n                vbVideo.bindToCurrentChannel();\n                vbVideo.setChannel(channelData.getChannel(selectedChannelNumber));\n            }\n        };\n\n        /**\n         * @function onChannelChangeSucceeded\n         * @description callback function when vbVideo.setChannel succeeds\n         * @param {object} the selected channel object\n         */\n        self.onChannelChangeSucceeded = function(channel) {\n            console.debug(\"onChannelChangeSucceeded channel name: \" + channel.name + \", channel ccid: \" + channel.ccid);\n        };\n\n        /**\n         * @function onChannelChangeError\n         * @description callback function when vbVideo.setChannel fails\n         * @param {channel} the selected channel object\n         * @param {number} the selected channel number\n         */\n        self.onChannelChangeError = function(channel, number) {\n            console.debug(\"onChannelChangeError channel name: \" + channel.name +\n                \", channel ccid: \" + channel.ccid + \", error: \" + number);\n        };\n    };\n});\n","text":"/**\n * @preserve Copyright 2014 YouView TV Ltd\n *\n * @license Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class channelController\n *\n * Controls the channel list scrolling. Delegated from\n * the full mode state.\n *\n */\n\ndefine('controllers/channelController', ['controllers/scrollController'], function(ScrollController) {\n    \"use strict\";\n    return function(channelModel) {\n        var self = this,\n            scrollController = new ScrollController(),\n            vbVideo = document.getElementById('vbVideo'),\n            /**\n             * @private\n             * @type {object} channel list DOM node\n             */\n            _channelList = document.getElementById('channelList'),\n            /**\n             * @private\n             * @type {integer} Index position of the channel list\n             */\n            _focusedChannelIndex = 0;\n\n        /**\n         * @private\n         * @function _getCurrentlySelectedItem\n         * @returns The current DOM node from the channel\n         * list with the .selected class attached\n         */\n        function _getCurrentlySelectedItem() {\n            return _channelList.querySelector('.selected');\n        };\n\n        /**\n         * @function hideChannels\n         * @description\n         */\n        self.hideChannels = function() {\n            scrollController.scrollFullModeOut();\n        };\n\n        /**\n         * @function showChannels\n         * @description\n         */\n        self.showChannels = function() {\n            scrollController.scrollFullModeIn();\n        };\n\n        /**\n         * @function setDefaultChannelSelection\n         * @description Sets the default channel to highlight\n         */\n        self.setDefaultChannelSelection = function() {\n            if (_channelList.children.length >= 1) {\n                _channelList.children[_focusedChannelIndex].classList.add('selected');\n            }\n        };\n\n        /**\n         * @function moveUp\n         * @description Mov the highlight class to the previous channel item\n         */\n        self.moveUp = function() {\n            var channelsLength = channelModel.getFilteredChannelList().length - 1,\n                currentSelection = _getCurrentlySelectedItem();\n\n            if (_focusedChannelIndex > 0) {\n                currentSelection.classList.remove('selected');\n                currentSelection.previousSibling.classList.add('selected');\n\n                _focusedChannelIndex -= 1;\n\n                scrollController.scrollUp(_getCurrentlySelectedItem());\n            }\n        };\n\n        /**\n         * @function moveDown\n         * @description Move the highlight class to the next channel item\n         */\n        self.moveDown = function() {\n\n            var channelsLength = channelModel.getFilteredChannelList().length - 1,\n                currentSelection = _getCurrentlySelectedItem();\n\n            if (_focusedChannelIndex < channelsLength) {\n                currentSelection.classList.remove('selected');\n                currentSelection.nextSibling.classList.add('selected');\n\n                _focusedChannelIndex += 1;\n\n                scrollController.scrollDown(_getCurrentlySelectedItem());\n            }\n        };\n\n        /**\n         * @function changeChannel\n         * @description Triggers a channel change vbVideo API.\n         * Uses the selected index `data-channel` attribute to select\n         * the channel ID. The user should then be able to\n         */\n        self.changeChannel = function() {\n\n            var channelData = channelModel.requestChannelList(),\n                channelList = channelModel.getFilteredChannelList(),\n                channelId = channelList[_focusedChannelIndex].id;\n\n            vbVideo.onChannelChangeSucceeded = self.onChannelChangeSucceeded;\n            vbVideo.onChannelChangeError = self.onChannelChangeError;\n\n            if (channelId) {\n                vbVideo.bindToCurrentChannel();\n                vbVideo.setChannel(channelData.getChannel(channelId));\n            } else {\n                console.debug(\"Channel not found in ChannelList \");\n            }\n        };\n\n        /**\n         * @function changeChannelByNumberKey\n         * @description changes channel to numberKey positioned item on menu\n         * @param {type} numberKey\n         */\n        self.changeChannelByNumberKey = function(numberKey) {\n\n            var channelData = channelModel.requestChannelList(),\n                channelList = channelModel.getFilteredChannelList(),\n                selectedChannelNumber = channelList[numberKey - 1].id;\n\n            if (selectedChannelNumber && numberKey <= channelList.length) {\n                vbVideo.bindToCurrentChannel();\n                vbVideo.setChannel(channelData.getChannel(selectedChannelNumber));\n            }\n        };\n\n        /**\n         * @function onChannelChangeSucceeded\n         * @description callback function when vbVideo.setChannel succeeds\n         * @param {object} the selected channel object\n         */\n        self.onChannelChangeSucceeded = function(channel) {\n            console.debug(\"onChannelChangeSucceeded channel name: \" + channel.name + \", channel ccid: \" + channel.ccid);\n        };\n\n        /**\n         * @function onChannelChangeError\n         * @description callback function when vbVideo.setChannel fails\n         * @param {channel} the selected channel object\n         * @param {number} the selected channel number\n         */\n        self.onChannelChangeError = function(channel, number) {\n            console.debug(\"onChannelChangeError channel name: \" + channel.name +\n                \", channel ccid: \" + channel.ccid + \", error: \" + number);\n        };\n    };\n});\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/js/controllers/channelController.js","scroll":2.066666666666667,"cursor":{"row":23,"column":0}},{"diskText":"/**\n * @preserve Copyright 2014 YouView TV Ltd\n *\n * @license Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class scrollController\n *\n * Controls scrolling channel lists implementing animation\n * best practices\n */\n\ndefine('controllers/scrollController', function() {\n    \"use strict\";\n    return function() {\n        /**\n         * @private\n         * @type {string}\n         * @description pointer for the current translation\n         * position of the navigation\n         */\n        var _currentTranslationPosition = 0,\n            self = this;\n\n        /**\n         * @function isNavigationItemInBounds\n         * @description for a direction and a nav item check if\n         * scrolling is required to make item visible\n         *\n         * @param {string} direction of travel can be down or up\n         * @returns {boolean} is item in bounds\n         */\n        function isNavigationItemInBounds(direction, navItem) {\n            var result = false,\n                boundaryPosition = document.getElementById('scrollBoundary').getBoundingClientRect(),\n                boundaryBottom = boundaryPosition.height + boundaryPosition.top,\n                boundaryTop = boundaryPosition.top,\n                navItemPosition = navItem.getBoundingClientRect();\n\n            if (direction === 'down') {\n                result = ((navItemPosition.height + navItemPosition.top) > boundaryBottom);\n            } else {\n                result = ((navItemPosition.top) < boundaryTop);\n            }\n\n            return result;\n        }\n\n        /**\n         * @function animateScrollUpIndicator\n         * @description Animates a scroll up indicator\n         * icon to give visual feedback that the up button has been pressed\n         */\n        function animateScrollUpIndicator() {\n            var scrollUpIndicator = document.getElementById('ScrollUpIndicator');\n\n            scrollUpIndicator.classList.add('up-highlighted');\n\n            var highlightTimeout = setTimeout(function() {\n                scrollUpIndicator.classList.remove('up-highlighted');\n                clearTimeout(highlightTimeout);\n            }, 150);\n        }\n\n        /**\n         * @function animateScrollDownIndicator\n         * @description Animates a scroll down indicator\n         * icon to give visual feedback that the down button has been pressed\n         */\n        function animateScrollDownIndicator() {\n            var scrollDownIndicator = document.getElementById('ScrollDownIndicator');\n\n            scrollDownIndicator.classList.add('down-highlighted');\n\n            var highlightTimeout = setTimeout(function() {\n                scrollDownIndicator.classList.remove('down-highlighted');\n                clearTimeout(highlightTimeout);\n            }, 150);\n        }\n\n        /**\n         * @function scrollUp\n         * @description Scrolls the content into view\n         * from the top of the screen, if required\n         *\n         * @param {object} Selected menu item\n         */\n        self.scrollUp = function(currentSelection) {\n\n            var isScrollRequired = isNavigationItemInBounds('up', currentSelection);\n\n            animateScrollUpIndicator();\n\n            if (isScrollRequired) {\n\n                var boundaryPosition = document.getElementById('scrollBoundary').getBoundingClientRect(),\n                    distanceInPixelsToMove = currentSelection.getBoundingClientRect().height,\n                    boundaryTop = boundaryPosition.top,\n                    channelListContainer = document.getElementById('channelList');\n\n                if (currentSelection.previousSibling.nodeName !== 'LI') {\n                    _currentTranslationPosition = 0;\n                } else {\n                    _currentTranslationPosition -= distanceInPixelsToMove;\n                }\n                channelListContainer.style.webkitTransform = 'translate(0, -' + _currentTranslationPosition + 'px)';\n            }\n        };\n\n        /**\n         * @function scrollDown\n         * @description Scrolls the content into view\n         * from the bottom of the screen, if required\n         *\n         * @param {object} Selected menu item\n         */\n        self.scrollDown = function(currentSelection) {\n\n            var isScrollRequired = isNavigationItemInBounds('down', currentSelection);\n\n            animateScrollDownIndicator();\n\n            if (isScrollRequired) {\n\n                var boundaryPosition = document.getElementById('scrollBoundary').getBoundingClientRect(),\n                    navItemTopPosition = currentSelection.getBoundingClientRect().top,\n                    navItemHeight = currentSelection.getBoundingClientRect().height,\n                    boundaryBottom = boundaryPosition.bottom,\n                    distanceInPixelsToMove = (navItemHeight + navItemTopPosition) - boundaryBottom,\n                    channelListContainer = document.getElementById('channelList');\n\n                _currentTranslationPosition += distanceInPixelsToMove;\n\n                // call into the animation frame here\n                channelListContainer.style.webkitTransform = 'translate(0, -' + _currentTranslationPosition + 'px)';\n            }\n        };\n\n        /**\n         * @function scrollFullModeIn\n         * @description Animates the full mode screen into view\n         */\n        self.scrollFullModeIn = function() {\n            var topDraw = document.getElementById(\"fullModeTopDraw\"),\n                rightDraw = document.getElementById(\"fullModeRightDraw\");\n\n            topDraw.style.webkitTransform = \"translate(0, 0px)\";\n            rightDraw.style.webkitTransform = \"translate(0, 0px)\";\n        };\n\n        /**\n         * @function slideFullModeOut\n         * @description Animates the full mode out of view\n         */\n        self.scrollFullModeOut = function() {\n            var topDraw = document.getElementById(\"fullModeTopDraw\"),\n                rightDraw = document.getElementById(\"fullModeRightDraw\");\n\n            topDraw.style.webkitTransform = \"translate(0, -216px)\";\n            rightDraw.style.webkitTransform = \"translate(403px, 0)\";\n        };\n    };\n});\n","text":"/**\n * @preserve Copyright 2014 YouView TV Ltd\n *\n * @license Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @class scrollController\n *\n * Controls scrolling channel lists implementing animation\n * best practices\n */\n\ndefine('controllers/scrollController', function() {\n    \"use strict\";\n    return function() {\n        /**\n         * @private\n         * @type {string}\n         * @description pointer for the current translation\n         * position of the navigation\n         */\n        var _currentTranslationPosition = 0,\n            self = this;\n\n        /**\n         * @function isNavigationItemInBounds\n         * @description for a direction and a nav item check if\n         * scrolling is required to make item visible\n         *\n         * @param {string} direction of travel can be down or up\n         * @returns {boolean} is item in bounds\n         */\n        function isNavigationItemInBounds(direction, navItem) {\n            var result = false,\n                boundaryPosition = document.getElementById('scrollBoundary').getBoundingClientRect(),\n                boundaryBottom = boundaryPosition.height + boundaryPosition.top,\n                boundaryTop = boundaryPosition.top,\n                navItemPosition = navItem.getBoundingClientRect();\n\n            if (direction === 'down') {\n                result = ((navItemPosition.height + navItemPosition.top) > boundaryBottom);\n            } else {\n                result = ((navItemPosition.top) < boundaryTop);\n            }\n\n            return result;\n        }\n\n        /**\n         * @function animateScrollUpIndicator\n         * @description Animates a scroll up indicator\n         * icon to give visual feedback that the up button has been pressed\n         */\n        function animateScrollUpIndicator() {\n            var scrollUpIndicator = document.getElementById('ScrollUpIndicator');\n\n            scrollUpIndicator.classList.add('up-highlighted');\n\n            var highlightTimeout = setTimeout(function() {\n                scrollUpIndicator.classList.remove('up-highlighted');\n                clearTimeout(highlightTimeout);\n            }, 150);\n        }\n\n        /**\n         * @function animateScrollDownIndicator\n         * @description Animates a scroll down indicator\n         * icon to give visual feedback that the down button has been pressed\n         */\n        function animateScrollDownIndicator() {\n            var scrollDownIndicator = document.getElementById('ScrollDownIndicator');\n\n            scrollDownIndicator.classList.add('down-highlighted');\n\n            var highlightTimeout = setTimeout(function() {\n                scrollDownIndicator.classList.remove('down-highlighted');\n                clearTimeout(highlightTimeout);\n            }, 150);\n        }\n\n        /**\n         * @function scrollUp\n         * @description Scrolls the content into view\n         * from the top of the screen, if required\n         *\n         * @param {object} Selected menu item\n         */\n        self.scrollUp = function(currentSelection) {\n\n            var isScrollRequired = isNavigationItemInBounds('up', currentSelection);\n\n            animateScrollUpIndicator();\n\n            if (isScrollRequired) {\n\n                var boundaryPosition = document.getElementById('scrollBoundary').getBoundingClientRect(),\n                    distanceInPixelsToMove = currentSelection.getBoundingClientRect().height,\n                    boundaryTop = boundaryPosition.top,\n                    channelListContainer = document.getElementById('channelList');\n\n                if (currentSelection.previousSibling.nodeName !== 'LI') {\n                    _currentTranslationPosition = 0;\n                } else {\n                    _currentTranslationPosition -= distanceInPixelsToMove;\n                }\n                channelListContainer.style.webkitTransform = 'translate(0, -' + _currentTranslationPosition + 'px)';\n            }\n        };\n\n        /**\n         * @function scrollDown\n         * @description Scrolls the content into view\n         * from the bottom of the screen, if required\n         *\n         * @param {object} Selected menu item\n         */\n        self.scrollDown = function(currentSelection) {\n\n            var isScrollRequired = isNavigationItemInBounds('down', currentSelection);\n\n            animateScrollDownIndicator();\n\n            if (isScrollRequired) {\n\n                var boundaryPosition = document.getElementById('scrollBoundary').getBoundingClientRect(),\n                    navItemTopPosition = currentSelection.getBoundingClientRect().top,\n                    navItemHeight = currentSelection.getBoundingClientRect().height,\n                    boundaryBottom = boundaryPosition.bottom,\n                    distanceInPixelsToMove = (navItemHeight + navItemTopPosition) - boundaryBottom,\n                    channelListContainer = document.getElementById('channelList');\n\n                _currentTranslationPosition += distanceInPixelsToMove;\n\n                // call into the animation frame here\n                channelListContainer.style.webkitTransform = 'translate(0, -' + _currentTranslationPosition + 'px)';\n            }\n        };\n\n        /**\n         * @function scrollFullModeIn\n         * @description Animates the full mode screen into view\n         */\n        self.scrollFullModeIn = function() {\n            var topDraw = document.getElementById(\"fullModeTopDraw\"),\n                rightDraw = document.getElementById(\"fullModeRightDraw\");\n\n            topDraw.style.webkitTransform = \"translate(0, 0px)\";\n            rightDraw.style.webkitTransform = \"translate(0, 0px)\";\n        };\n\n        /**\n         * @function slideFullModeOut\n         * @description Animates the full mode out of view\n         */\n        self.scrollFullModeOut = function() {\n            var topDraw = document.getElementById(\"fullModeTopDraw\"),\n                rightDraw = document.getElementById(\"fullModeRightDraw\");\n\n            topDraw.style.webkitTransform = \"translate(0, -216px)\";\n            rightDraw.style.webkitTransform = \"translate(403px, 0)\";\n        };\n    };\n});\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/js/controllers/scrollController.js","scroll":2.0666666666666664,"cursor":{"row":21,"column":0}},{"diskText":"/**\n * Copyright 2014 YouView TV Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * provides default data for use where there is no channel list e.g. on PC\n *\n */\n\ndefine('stubs/defaultChannelData', [\n    {\n        'title': 'youview 1',\n        'id': 'cdi'\n    }, {\n        'title': 'youview 2',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 3',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 4',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 5',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 6',\n        'id': 'n/a'\n    }\n]);\n","text":"/**\n * Copyright 2014 YouView TV Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * provides default data for use where there is no channel list e.g. on PC\n *\n */\n\ndefine('stubs/defaultChannelData', [\n    {\n        'title': 'youview 1',\n        'id': 'cdi'\n    }, {\n        'title': 'youview 2',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 3',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 4',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 5',\n        'id': 'n/a'\n    }, {\n        'title': 'youview 6',\n        'id': 'n/a'\n    }\n]);\n","active":false,"path":"/Users/irenyard/workspace/html-reference-applications/IPCRB Reference Application/public_html/js/stubs/defaultChannelData.js","scroll":2.0666666666666664,"cursor":{"row":42,"column":0}}]